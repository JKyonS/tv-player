#!/bin/bash

##
##
## Script to view/download/get info from videos on trollvids without needing flash
## Requires:
##	-mpv with networking support (ffmpeg with networking)
##	-youtube-dl
##	-everything else should come with a default GNU/Linux install
##
##

# General 

url_f="$2"			# use $2 if there is a flag being used
url_nf="$1"			# use $1 if there is no flags
script_files="/tmp/tv-player"	# Location where the script will put it's files
version="tv-player_v0.41"	# Script version (pretty inconsistant)
cus_path=""			# Custom path to put downloads (ex. /home/kyouma/MMD/)
tube_ops=""			# Only applies to videos downloaded with youtube-dl
# ex. tube_ops="-f bestvideo+bestaudio -o $cus_path%(title)s.-%(ext)s"

# Colors
c_00="\033[0m"			# Default color
c_01="\033[31m"			# Red
c_02="\033[32m"			# Green
c_03="\033[33m"			# Yellow

create_files(){
	mkdir $script_files
	touch \
		$script_files/multi.txt \
		$script_files/mainpage.txt \
		$script_files/xml_file.txt \
		$script_files/tv_log00 \
		$script_files/tv_log01
}

clean_files_nask(){
	if [ -d $script_files ]
	then
		echo -n "Cleaning files... "
		rm -R $script_files
		echo -e "${c_02}done.${c_00}"
		exit 0
	else
		echo -e "${c_03}No files to clean.${c_00}"
		exit 0

	fi
}

clean_files_ask(){
	read -p "Delete script files?(y/n) " delete
	if [ $delete == y ]
	then
		clean_files_nask
	else
		echo -e "${c_01}Not cleaning files!${c_00}"
		exit 0
	fi
}

get_main(){
	echo -n "Downloading html page... "
	if [[ "$url_nf" =~ "trollvids.com" ]]
	then
		echo "MAIN_URL:$url_nf" >> $script_files/multi.txt
		wget -nv "$url_nf" -o $script_files/tv_log00 -O $script_files/mainpage.txt
	elif [[ "$url_nf" != "trollvids.com" ]]
	then
		echo "MAIN_URL:$url_f" >> $script_files/multi.txt
		wget -nv "$url_f" -o $script_files/tv_log00 -O $script_files/mainpage.txt
	fi
	echo -e "${c_02}done.${c_00}"
}

xml_link(){
	force_url=`grep "MAIN_URL" $script_files/multi.txt | sed -n "s|.*\(http://trollvids.com/video/\)\([^/]*\).*|\2|p"`
	echo "XML_URL:http://trollvids.com/nuevo/player/config.php?v=$force_url" >> $script_files/multi.txt
}

xml_file(){
	grep -E '(docs.google.com|drive.google.com)' $script_files/mainpage.txt > /dev/null
	if [ $? == 0 ]
	then
		google_video=`sed -n 's|.*\(iframe src="\)\([^"]*\).*|\2|p' $script_files/mainpage.txt | sed -n 's|preview|view|p'`
		echo "VIDEO_LINK:$google_video" >> $script_files/multi.txt
	else
		grep -i 'player.vimeo.com' $script_files/mainpage.txt > /dev/null
		if [ $? == 0 ]
		then
			vimeo_video=`sed -n 's|.*\(player.vimeo.com\)\([^"]*\).*|\2|p' $script_files/mainpage.txt | sed -n 's|/video/|http://vimeo.com/|p'`
			echo "VIDEO_LINK:$vimeo_video" >> $script_files/multi.txt
		else
			xml_FILE=`grep "XML_URL:" $script_files/multi.txt | sed -n "s|.*\(XML_URL:\)\(.*\)|\2|p"`
			wget -nv $xml_FILE -o $script_files/tv_log00 -O $script_files/xml_file.txt
		fi
	fi
}

xml_info(){
	video_title=`sed -n 's|.*\(<title><\!\[CDATA\[\)\([^>]*\).*|\2|p' $script_files/xml_file.txt | sed -n "s|\(]]\)||p"`
	echo "VIDEO_TITLE:$video_title" >> $script_files/multi.txt
	echo -n "Getting video link... "
	grep -i 'no_video.flv' $script_files/xml_file.txt > /dev/null
	if [ $? == 0 ]
	then
		echo -e "${c_01}No video link found!${c_00}"
		clean_files_nask
	else
		grep -i 'filehd' $script_files/xml_file.txt > /dev/null
		if [ $? == 0 ]
		then
			video_link=`sed -n 's|.*\(<filehd>\)\([^<]*\).*|\2|p' $script_files/xml_file.txt`
			echo "VIDEO_LINK:$video_link" >> $script_files/multi.txt
			echo -e "${c_02}done.${c_00}"
		else
			video_link=`sed -n 's|.*\(<file>\)\([^<]*\).*|\2|p' $script_files/xml_file.txt`
			echo "VIDEO_LINK:$video_link" >> $script_files/multi.txt
			echo -e "${c_02}done.${c_00}"
		fi
	fi
}

spider(){
	spider_link=`grep "VIDEO_LINK:" $script_files/multi.txt | sed -n "s|\(VIDEO_LINK:\)\(.*\)|\2|p"`
	if [[ "$spider_link" =~ "trollvids.com" ]]
	then
		echo -n "Checking video availability... "
		wget -nv --spider $spider_link -o $script_files/tv_log01
		grep -i ' 200 OK' $script_files/tv_log01 > /dev/null
		if [ $? == 0 ]
		then
			echo "SPIDER:200 OK" >> $script_files/multi.txt
			echo -e "${c_02}done.${c_00}"
		else
			echo "SPIDER:ERROR" >> $script_files/multi.txt
			echo -e "${c_01}ERROR: No valid URL or video unavailable right now.${c_00}"
		fi
	else
		echo "SPIDER:NOT_AVAILABLE" >> $script_files/multi.txt
	fi
}

play(){
	video_play=`grep "VIDEO_LINK:" $script_files/multi.txt | sed -n "s|.*\(VIDEO_LINK:\)\(.*\)|\2|p"`
	video_title=`grep "VIDEO_TITLE:" $script_files/multi.txt | sed -n "s|.*\(VIDEO_TITLE:\)\(.*\)|\2|p"`
	grep "google.com" $script_files/multi.txt > /dev/null
	if [ $? == 0 ]
	then
		botnet_video=`grep "VIDEO_LINK:" $script_files/multi.txt | sed -n "s|.*\(VIDEO_LINK:\)\(.*\)|\2|p"`
		echo -e "${c_03}Botnet video detected!!${c_00}"
		echo -e "${c_02}Linking to direct video:${c_00}"
		echo -e "${c_02}$botnet_video${c_00}"
		clean_files_ask
	else
		mpv --media-title="$video_title" $video_play
	fi
}

# Downloaders

downloader(){
	echo "Downloading video... "
	grep -E '(docs.google.com|drive.google.com)' $script_files/multi.txt > /dev/null
	if [ $? == 0 ]
	then
		botnet_video=`grep "VIDEO_LINK:" $script_files/multi.txt | sed -n "s|.*\(VIDEO_LINK:\)\(.*\)|\2|p" | sed -n 's|.*\(file/d/\)\([^/]*\)/.*|\2|p'`
		botnet_link="https://docs.google.com/uc?id=$botnet_video&export=download"
		echo -e "${c_03}Botnet video detected!${c_00}"
		echo -e "${c_02}Linking to download:${c_00}"
		echo -e "${c_02}$botnet_link${c_00}"
		clean_files_ask
	else
		grep -E '(youtube|vimeo)' $script_files/multi.txt
		if [ $? == 0 ]
		then
			tube_download=`grep "VIDEO_LINK:" $script_files/multi.txt | sed -n "s|.*\(VIDEO_LINK:\)\(.*\)|\2|p"`
			echo -e "${c_03}Youtube/Vimeo detected!${c_00}"
			echo -e "${c_02}Using youtube-dl to download video.${c_00}"
			youtube-dl $tube_ops $tube_download
		else
			video_title=`grep "VIDEO_TITLE:" $script_files/multi.txt | sed -n "s|.*\(VIDEO_TITLE:\)\(.*\)|\2|p"`
			video_link=`grep "VIDEO_LINK:" $script_files/multi.txt | sed -n "s|.*\(VIDEO_LINK:\)\(.*\)|\2|p"`
			file_type=`grep "VIDEO_LINK:" $script_files/multi.txt | sed -n "s|.*\(/videos/\)\([0-9A-Za-z]*\)\([.*]*\)|\3|p"`
			wget -q --show-progress -nc $video_link -O "$cus_path"Trollvids\ -\ "$video_title""$file_type"
		fi
	fi
}

# Video Info

info(){
	info_title="`sed -n 's|.*\(<meta property="og:title" content="\)\([^"]*\).*|\2|p' $script_files/mainpage.txt`"
	info_description="`sed -n 's|.*\(<meta property="og:description" content="\)\([^"]*\).*|\2|p' $script_files/mainpage.txt`"
	info_thumb="`sed -n 's|.*\(<meta property="og:image" content="\)\([^"]*\).*|\2|p' $script_files/mainpage.txt`"
	clear
	echo -e "${c_03}Getting info...${c_00}"
	echo
	grep 'private_video_error' $script_files/mainpage.txt > /dev/null
	if [ $? == 0 ]
	then
		echo -e "${c_01}This is a private video.${c_00}"
		echo
	else
		echo -e "${c_02}This video is not private.${c_00}"
		echo
	fi
	echo -e "${c_03}Video Title:${c_00}"
	echo 
	echo $info_title
	echo
	echo -e "${c_03}Description:${c_00}"
	echo
	echo $info_description
	echo
	echo -e "${c_03}Video Thumbnail:${c_00}"
	echo
	echo $info_thumb
	echo
}

show_help(){
	echo "Use one of the following:"
	echo
	echo "-c	Clean temporary files the script created."
	echo "-d	Download the video instead of streaming it."
	echo "-h	Show this help screen."
	echo "-i	Get information of a video, YMMV."
	echo "-n	Stream normally."
	echo "-v	Display script version."
	echo "-z 	Show possible errors and fixes."	
	echo
}

show_errors(){
	echo "Work in progress ;^)"
}


if [[ "$1" =~ "trollvids.com" ]]
then
	create_files
	get_main
	xml_link
	xml_file
	xml_info
	spider
	play
	clean_files_nask
elif [[ -z $1 ]]
then
	echo Usage: tv-player URL or tv-player -h
else
	while getopts ":cd:hi:n:t:vz" opt; do
		case $opt in
			c)
				clean_files_nask
				;;
			d)
				create_files
				get_main
				xml_link
				xml_file
				xml_info
				spider
				downloader
				clean_files_nask
				;;
			h)
				show_help
				;;
			i)
				create_files
				get_main
				info
				clean_files_nask
				;;
			n)
				create_files
				get_main
				xml_link
				xml_file
				xml_info
				spider
				play
				clean_files_nask
				;;
			v)
				echo $version
				;;
			z)
				show_errors
				;;
			\?)
				echo "Invalid option: -$OPTARG" >&2
				;;
			:)
				echo "Option -$OPTARG requires a URL/file."
				;;
		esac
	done
fi
